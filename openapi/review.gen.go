// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// AddReviewRequest defines model for AddReviewRequest.
type AddReviewRequest struct {
	AuthorId string `json:"authorId"`
	Stars    uint8  `json:"stars"`
	Text     string `json:"text"`
}

// AddReviewResponse defines model for AddReviewResponse.
type AddReviewResponse = map[string]interface{}

// GetReviewsResponse defines model for GetReviewsResponse.
type GetReviewsResponse struct {
	ReviewSummary *ReviewSummary `json:"reviewSummary,omitempty"`
	Reviews       []Review       `json:"reviews"`
}

// Review defines model for Review.
type Review struct {
	AuthorId string  `json:"authorId"`
	Created  string  `json:"created"`
	Id       string  `json:"id"`
	Stars    uint32  `json:"stars"`
	Text     string  `json:"text"`
	Updated  *string `json:"updated,omitempty"`
}

// ReviewSummary defines model for ReviewSummary.
type ReviewSummary struct {
	AverageStars float32 `json:"averageStars"`
	Count        uint32  `json:"count"`
}

// GetReviewsParams defines parameters for GetReviews.
type GetReviewsParams struct {
	PreloadedReviewsLimit *int `form:"preloadedReviewsLimit,omitempty" json:"preloadedReviewsLimit,omitempty"`
}

// AddReviewsJSONRequestBody defines body for AddReviews for application/json ContentType.
type AddReviewsJSONRequestBody = AddReviewRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get reviews
	// (GET /entities/{entityId}/reviews)
	GetReviews(ctx echo.Context, entityId string, params GetReviewsParams) error
	// Add a review
	// (POST /entities/{entityId}/reviews)
	AddReviews(ctx echo.Context, entityId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetReviews converts echo context to params.
func (w *ServerInterfaceWrapper) GetReviews(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entityId" -------------
	var entityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityId", runtime.ParamLocationPath, ctx.Param("entityId"), &entityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsParams
	// ------------- Optional query parameter "preloadedReviewsLimit" -------------

	err = runtime.BindQueryParameter("form", true, false, "preloadedReviewsLimit", ctx.QueryParams(), &params.PreloadedReviewsLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter preloadedReviewsLimit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReviews(ctx, entityId, params)
	return err
}

// AddReviews converts echo context to params.
func (w *ServerInterfaceWrapper) AddReviews(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entityId" -------------
	var entityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityId", runtime.ParamLocationPath, ctx.Param("entityId"), &entityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddReviews(ctx, entityId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/entities/:entityId/reviews", wrapper.GetReviews)
	router.POST(baseURL+"/entities/:entityId/reviews", wrapper.AddReviews)

}
